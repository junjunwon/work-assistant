INSERT INTO job (id, title, created_at, updated_at, created_by, updated_by) VALUES (1, 'Design', NOW(), NOW(), 1, 1);
INSERT INTO job (id, title, created_at, updated_at, created_by, updated_by) VALUES (2, 'Development', NOW(), NOW(), 1, 1);
INSERT INTO job (id, title, created_at, updated_at, created_by, updated_by) VALUES (3, 'Planning', NOW(), NOW(), 1, 1);
INSERT INTO job (id, title, created_at, updated_at, created_by, updated_by) VALUES (4, 'Video Editing', NOW(), NOW(), 1, 1);

-- JobRole 데이터 삽입
INSERT INTO role (id, title, job_id, created_at, updated_at, created_by, updated_by) VALUES (1, 'Frontend', 2, NOW(), NOW(), 1, 1);
INSERT INTO role (id, title, job_id, created_at, updated_at, created_by, updated_by) VALUES (2, 'Backend', 2, NOW(), NOW(), 1, 1);
INSERT INTO role (id, title, job_id, created_at, updated_at, created_by, updated_by) VALUES (3, 'App Development', 2, NOW(), NOW(), 1, 1);
INSERT INTO role (id, title, job_id, created_at, updated_at, created_by, updated_by) VALUES (4, 'UI/UX Design', 1, NOW(), NOW(), 1, 1);
INSERT INTO role (id, title, job_id, created_at, updated_at, created_by, updated_by) VALUES (5, 'Graphic Design', 1, NOW(), NOW(), 1, 1);
INSERT INTO role (id, title, job_id, created_at, updated_at, created_by, updated_by) VALUES (6, 'Project Management', 3, NOW(), NOW(), 1, 1);
INSERT INTO role (id, title, job_id, created_at, updated_at, created_by, updated_by) VALUES (7, 'Video Editing', 4, NOW(), NOW(), 1, 1);

INSERT INTO interview_category (id, name) VALUES
                                              (1, 'spring'),
                                              (2, 'network'),
                                              (3, 'java');

-- Quiz 데이터 삽입
INSERT INTO interview_question (id, question, ideal_answer, role_id, interview_category_id,
                                created_at, updated_at, created_by, updated_by) VALUES
                (1, 'Explain the difference between HTTP GET and POST methods.', 'GET is used to request data from a specified resource. POST is used to submit data to be processed to a specified resource.', 2, 2, NOW(), NOW(), 1, 1),
                (2, 'What Is Spring Framework?', 'Spring is the most broadly used framework for the development of Java Enterprise Edition applications. Further, the core features of Spring can be used in developing any Java application. We use its extensions for building various web applications on top of the Jakarta EE platform. We can also just use its dependency injection provisions in simple standalone applications.', 2, 1, NOW(), NOW(), 1, 1),
                (3, 'What Are the Benefits of Using Spring?', 'Spring targets to make Jakarta EE development easier, so let’s look at the advantages:\n\nLightweight – There is a slight overhead of using the framework in development.\nInversion of Control (IoC) – Spring container takes care of wiring dependencies of various objects instead of creating or looking for dependent objects.\nAspect-Oriented Programming (AOP) – Spring supports AOP to separate business logic from system services.\nIoC container – manages Spring Bean life cycle and project-specific configurations\nMVC framework – used to create web applications or RESTful web services, capable of returning XML/JSON responses\nTransaction management – reduces the amount of boilerplate code in JDBC operations, file uploading, etc., either by using Java annotations or by Spring Bean XML configuration file\nException Handling – Spring provides a convenient API for translating technology-specific exceptions into unchecked exceptions.', 2, 1, NOW(), NOW(), 1, 1),
                (4, 'What Spring Sub-Projects Do You Know? Describe Them Briefly.', 'Core – a key module that provides fundamental parts of the framework, such as IoC or DI\nJDBC – enables a JDBC-abstraction layer that removes the need to do JDBC coding for specific vendor databases\nORM integration – provides integration layers for popular object-relational mapping APIs, such as JPA, JDO and Hibernate\nWeb – a web-oriented integration module that provides multipart file upload, Servlet listeners and web-oriented application context functionalities\nMVC framework – a web module implementing the Model View Controller design pattern\nAOP module – aspect-oriented programming implementation allowing the definition of clean method-interceptors and pointcuts', 2, 1, NOW(), NOW(), 1, 1),
                (5, 'What Is Dependency Injection?', 'Dependency injection, an aspect of Inversion of Control (IoC), is a general concept stating that we do not create our objects manually but instead describe how they should be created. Then an IoC container will instantiate required classes if needed.', 2, 1, NOW(), NOW(), 1, 1),
                (6, 'How Can We Inject Beans in Spring?', 'A few different options exist in order to inject Spring beans:\n\nSetter injection\nConstructor injection\nField injection\nThe configuration can be done using XML files or annotations.', 2, 1, NOW(), NOW(), 1, 1),
                (7, 'Which Is the Best Way of Injecting Beans and Why?', 'The recommended approach is to use constructor arguments for mandatory dependencies and setters for optional ones. This is because constructor injection allows injecting values to immutable fields and makes testing easier.', 2, 1, NOW(), NOW(), 1, 1),
                (8, 'What Is the Difference Between BeanFactory and ApplicationContext?', 'BeanFactory is an interface representing a container that provides and manages bean instances. The default implementation instantiates beans lazily when getBean() is called. In contrast, ApplicationContext is an interface representing a container holding all information, metadata and beans in the application. It also extends the BeanFactory interface, but the default implementation instantiates beans eagerly when the application starts. However, this behavior can be overridden for individual beans.', 2, 1, NOW(), NOW(), 1, 1),
                (9, 'What Is a Spring Bean?', 'The Spring Beans are Java Objects that are initialized by the Spring IoC container.', 2, 1, NOW(), NOW(), 1, 1),
                (10, 'What Is the Default Bean Scope in Spring Framework?', 'By default, a Spring Bean is initialized as a singleton.', 2, 1, NOW(), NOW(), 1, 1),
                (11, 'How to Define the Scope of a Bean?', 'In order to set Spring Bean’s scope, we can use @Scope annotation or “scope” attribute in XML configuration files. Note that there are five supported scopes:\n\nSingleton\nPrototype\nRequest\nSession\nGlobal-session', 2, 1, NOW(), NOW(), 1, 1),
                (12, 'Are Singleton Beans Thread-Safe?', 'No, singleton beans are not thread-safe, as thread safety is about execution, whereas the singleton is a design pattern focusing on creation. Thread safety depends only on the bean implementation itself.', 2, 1, NOW(), NOW(), 1, 1),
                (13, 'What Does the Spring Bean Life Cycle Look Like?', 'First, a Spring bean needs to be instantiated based on Java or XML bean definition. It may also be required to perform some initialization to get it into a usable state. After that, when the bean is no longer required, it will be removed from the IoC container.', 2, 1, NOW(), NOW(), 1, 1),
                (14, 'What Is the Spring Java-Based Configuration?', 'It’s one of the ways of configuring Spring-based applications in a type-safe manner. It’s an alternative to the XML-based configuration.', 2, 1, NOW(), NOW(), 1, 1),
                (15, 'Can We Have Multiple Spring Configuration Files in One Project?', 'Yes, in large projects, having multiple Spring configurations is recommended to increase maintainability and modularity. We can load multiple Java-based configuration files:\n@Configuration\n@Import({MainConfig.class, SchedulerConfig.class})\npublic class AppConfig {\n}\nOr we can load one XML file that will contain all other configs:\nApplicationContext context = new ClassPathXmlApplicationContext("spring-all.xml");\nAnd inside this XML file we’ll have the following:\n<import resource="main.xml"/>\n<import resource="scheduler.xml"/>', 2, 1, NOW(), NOW(), 1, 1),
                (16, 'What Is Spring Security?', 'Spring Security is a separate module of the Spring framework that focuses on providing authentication and authorization methods in Java applications. It also takes care of most of the common security vulnerabilities such as CSRF attacks. To use Spring Security in web applications, we can get started with the simple annotation @EnableWebSecurity.', 2, 1, NOW(), NOW(), 1, 1),
                (17, 'What Is Spring Boot?', 'Spring Boot is a project that provides a pre-configured set of frameworks to reduce boilerplate configuration. This way, we can have a Spring application up and running with the smallest amount of code.', 2, 1, NOW(), NOW(), 1, 1),
                (18, 'Name Some of the Design Patterns Used in the Spring Framework?', 'Singleton Pattern – singleton-scoped beans\nFactory Pattern – Bean Factory classes\nPrototype Pattern – prototype-scoped beans\nAdapter Pattern – Spring Web and Spring MVC\nProxy Pattern – Spring Aspect-Oriented Programming support\nTemplate Method Pattern – JdbcTemplate, HibernateTemplate, etc.\nFront Controller – Spring MVC DispatcherServlet\nData Access Object – Spring DAO support\nModel View Controller – Spring MVC', 2, 1, NOW(), NOW(), 1, 1),
                (19, 'How Does the Scope Prototype Work?', 'Scope prototype means that every time we call for an instance of the Bean, Spring will create a new instance and return it. This differs from the default singleton scope, where a single object instance is instantiated once per Spring IoC container.', 2, 1, NOW(), NOW(), 1, 1),
                (20, 'How to Get ServletContext and ServletConfig Objects in a Spring Bean?', 'We can do either by implementing Spring-aware interfaces. We could also use @Autowired annotation on those beans:\n@Autowired\nServletContext servletContext;\n@Autowired\nServletConfig servletConfig;', 2, 1, NOW(), NOW(), 1, 1),
                (21, 'What Is a Controller in Spring MVC?', 'Simply put, all the requests processed by the DispatcherServlet are directed to classes annotated with @Controller. Each controller class maps one or more requests to methods that process and execute the requests with provided inputs.', 2, 1, NOW(), NOW(), 1, 1),
                (22, 'How Does the @RequestMapping Annotation Work?', 'The @RequestMapping annotation is used to map web requests to Spring Controller methods. In addition to simple use cases, we can use it for mapping of HTTP headers, binding parts of the URI with @PathVariable, and working with URI parameters and the @RequestParam annotation.', 2, 1, NOW(), NOW(), 1, 1),
                (23, 'What Is Spring JdbcTemplate Class and How to Use It?', 'The Spring JDBC template is the primary API through which we can access database operations logic that we’re interested in:\nCreation and closing of connections\nExecuting statements and stored procedure calls\nIterating over the ResultSet and returning results\nIn order to use it, we’ll need to define the simple configuration of DataSource:\n@Configuration\n@ComponentScan("org.baeldung.jdbc")\npublic class SpringJdbcConfig {\n@Bean\npublic DataSource mysqlDataSource() {\nDriverManagerDataSource dataSource = new DriverManagerDataSource();\ndataSource.setDriverClassName("com.mysql.jdbc.Driver");\ndataSource.setUrl("jdbc:mysql://localhost:3306/springjdbc");\ndataSource.setUsername("guest_user");\ndataSource.setPassword("guest_password");\nreturn dataSource;\n}\n}', 2, 1, NOW(), NOW(), 1, 1),
                (24, 'How to Enable Transactions in Spring and What Are Their Benefits?', 'There are two distinct ways to configure Transactions — with annotations or by using Aspect-Oriented Programming (AOP). The benefits include:\nConsistent programming model across different transaction APIs\nSupport for declarative transaction management\nSimpler API for programmatic transaction management\nIntegration with Spring’s data access abstractions', 2, 1, NOW(), NOW(), 1, 1),
                (25, 'What Is Spring DAO?', 'Spring Data Access Object (DAO) is Spring’s support provided to work with data access technologies like JDBC, Hibernate and JPA in a consistent and easy way.', 2, 1, NOW(), NOW(), 1, 1),
                (26, 'What Is Aspect-Oriented Programming (AOP)?', 'Aspects enable the modularization of cross-cutting concerns such as transaction management that span multiple types and objects by adding extra behavior to already existing code without modifying affected classes.', 2, 1, NOW(), NOW(), 1, 1),
                (27, 'What Are Aspect, Advice, Pointcut and JoinPoint in AOP?', 'Aspect – a class that implements cross-cutting concerns\nAdvice – the methods that get executed when a specific JoinPoint with matching Pointcut is reached in the application\nPointcut – a set of regular expressions that are matched with JoinPoint to determine whether Advice needs to be executed or not\nJoinPoint – a point during the execution of a program, such as the execution of a method or the handling of an exception', 2, 1, NOW(), NOW(), 1, 1),
                (28, 'What Is Weaving?', 'Weaving is a process that links aspects with other application types or objects to create an advised object. This can be done at compile time, load time, or runtime.', 2, 1, NOW(), NOW(), 1, 1),
                (29, 'What Is Reactive Programming?', 'Reactive programming is about non-blocking, event-driven applications that scale with a small number of threads, with back pressure being a key ingredient that aims to ensure producers don’t overwhelm consumers.', 2, 1, NOW(), NOW(), 1, 1),
                (30, 'What Is Spring WebFlux?', 'Spring WebFlux is Spring’s reactive-stack web framework, and it’s an alternative to Spring MVC.', 2, 1, NOW(), NOW(), 1, 1),
                (31, 'What Are the Mono and Flux Types?', 'The WebFlux framework in Spring Framework 5 uses Reactor as its async foundation. This project provides two core types: Mono to represent a single async value and Flux to represent a stream of async values. They both also implement the Publisher interface defined in the Reactive Streams specification.', 2, 1, NOW(), NOW(), 1, 1),
                (32, 'What Is the Use of WebClient and WebTestClient?', 'WebClient is a component in the new Web Reactive framework that can act as a reactive client for performing non-blocking HTTP requests. Since it’s reactive client, it can handle reactive streams with back pressure, and it can take full advantage of Java 8 lambdas. It can also handle both sync and async scenarios. On the other hand, the WebTestClient is a similar class that we can use in tests. Basically, it’s a thin shell around the WebClient. It can connect to any server over an HTTP connection. It can also bind directly to WebFlux applications using mock request and response objects, without the need for an HTTP server.', 2, 1, NOW(), NOW(), 1, 1),
                (33, 'What Are the Disadvantages of Using Reactive Streams?', 'There are some major disadvantages to using reactive streams:\nTroubleshooting a Reactive application is a bit difficult, so be sure to check out our tutorial on debugging reactive streams for some handy debugging tips.\nThere is limited support for reactive data stores since traditional relational data stores have yet to embrace the reactive paradigm.\nThere’s an extra learning curve when implementing.', 2, 1, NOW(), NOW(), 1, 1),
                (34, 'Is Spring 5 Compatible With Older Versions of Java?', 'In order to take advantage of Java 8 features, the Spring codebase has been revamped. This means older versions of Java cannot be used. So, the framework requires a minimum of Java 8.', 2, 1, NOW(), NOW(), 1, 1),
                (35, 'How Does Spring 5 Integrate With JDK 9 Modularity?', 'In Spring 5, everything has been modularized. This way, we won’t be forced to import jars that may not have the functionalities we’re looking for.', 2, 1, NOW(), NOW(), 1, 1),
                (36, 'Can We Use Both Web MVC and WebFlux in the Same Application?', 'As of now, Spring Boot will only allow either Spring MVC or Spring WebFlux, as Spring Boot tries to auto-configure the context depending on the dependencies that exist in its classpath. Also, Spring MVC cannot run on Netty. Moreover, MVC is a blocking paradigm and WebFlux is a non-blocking style. So, we shouldn’t be mixing both together because they serve different purposes.', 2, 1, NOW(), NOW(), 1, 1);

